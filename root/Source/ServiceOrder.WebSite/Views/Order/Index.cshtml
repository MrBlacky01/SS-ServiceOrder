@model   ServiceOrder.ViewModel.ViewModels.Implementation.Order.OrderViewModel 
@{
    ViewBag.Title = "Make Order";
}

<h3 class="text-center">You want to make order of @Model.ProviderName provider. Please fill order data:</h3>
<br/>
<br/>

<form class="form-horizontal">

    <div class="row top-buffer"> 
        <div class="col-md-offset-4 col-sm-offset-3">
            @Html.LabelFor(m => m.Date, new { @class = "col-md-2 col-sm-3 col-xs-5 control-label" })
            @Html.EditorFor(m => m.Date)
        </div>            
    </div>

    <div class="row top-buffer">
        <div class="col-md-offset-4 col-sm-offset-3">
            @Html.LabelFor(m => m.BeginTime, new { @class = "col-md-2 col-sm-3 col-xs-5 control-label" })
            @Html.EditorFor(m => m.BeginTime)
        </div>            
    </div>

    <div class="row top-buffer ">
        <div class="col-md-offset-4 col-sm-offset-3 ">
            @Html.LabelFor(m => m.EndTime, new { @class = "col-md-2 col-sm-3 col-xs-5 control-label .center-align" })
            @Html.EditorFor(m => m.EndTime)
        </div> 
    </div>
    
    <div class="row top-buffer ">
        <div class="col-md-offset-2 col-sm-offset-1">
            @Html.LabelFor(m => m.Regions, new { @class = "col-md-2 col-sm-3 col-xs-4 control-label .center-align" })
            <div class="col-md-6 col-sm-8">
                <input id="region" value="1"  style="width: 100%" />
            </div>
        </div>
    </div>
    
    <div class="row top-buffer ">
        <div class="col-md-offset-2 col-sm-offset-1">
            @Html.LabelFor(m => m.Categories, new { @class = "col-md-2 col-sm-3 col-xs-4 control-label .center-align" })
            <div class="col-md-6 col-sm-8">
                <input id="category" value="1" style="width: 100%" />
            </div>            
        </div>        
    </div>
    
    <div class="row top-buffer ">
        <div class="col-md-offset-2 col-sm-offset-1">
            <label for="service" class="col-md-2 col-sm-3 col-xs-4 control-label .center-align">Services</label>
            <div class="col-md-6 col-sm-8">
                <input id="service" value="1" style="width: 100%" />
            </div>            
        </div>        
    </div>
    
    <br />

    <div class="row top-buffer">
        <div class="col-md-offset-4 col-md-4 col-sm-offset-4 col-sm-6 col-xs-10 top-buffer">
            <input type="submit" value="Make Order" class="btn btn-default make-order-button" style="width:100%" />
        </div>
    </div>
    
</form>

<script>

    $(document).ready(function () {

        var datePicker = $('#Date')
            .kendoDatePicker({
                value: new Date(),
                min: new Date(),
                max: new Date(new Date().setFullYear(new Date().getFullYear() + 1)),
                disableDates: ["sa", "su"],
                format: "dd/MM/yyyy",
                change : dateChange
            })
            .data("kendoDatePicker");

        var startTimePicker = $("#BeginTime")
            .kendoTimePicker({
                format: "HH:mm",
                min: new Date(2000, 0, 1, 8, 0, 0),
                max: new Date(2000, 0, 1, 21, 0, 0),
                value: new Date(2011, 0, 1, 8, 0),
                interval: 60,
                change:startChange
            }).data("kendoTimePicker");

        var endTimePicker = $('#EndTime')
            .kendoTimePicker({
                format: "HH:mm",
                min: new Date(2000, 0, 1, 9, 0, 0),
                max: new Date(2000, 0, 1, 22, 0, 0),
                value: new Date(2011, 0, 1, 9, 0),
                interval: 60
        }).data("kendoTimePicker");

        var providerRegions = @(Html.Raw(Json.Encode(Model.Regions)));

        var regionDropDownList = $('#region')
            .kendoDropDownList({
                dataTextField: "Title",
                dataValueField: "Id",
                dataSource: providerRegions,
                index: 0
            })
        .data("kendoDropDownList");

        var providerCategories = @(Html.Raw(Json.Encode(Model.Categories)));

        var categoryDropDownList = $('#category')
            .kendoDropDownList({
                dataTextField: "Title",
                dataValueField: "Id",
                dataSource: providerCategories,
                index: 0,
                change: onChange
            })
            .data("kendoDropDownList");

        var avaliableTimeArray = new Array();

        firstLoad();

        var serviceDropDownList = $('#service')
            .kendoDropDownList({
                dataTextField: "Title",
                dataValueField: "Id"
            })
            .data("kendoDropDownList");


        function  dateChange() {
            sendAjaxLoadTime();
        }
        function startChange() {
            var startTime = startTimePicker.value();           
            rebuildEndTimePicker(avaliableTimeArray, startTime);
        }

        function onChange() {
            sendAjaxLoadServices(categoryDropDownList.dataItem());
        };

        function firstLoad() {
            sendAjaxLoadServices(categoryDropDownList.dataItem(0));
            sendAjaxLoadTime();
        }

        function sendAjaxLoadTime() {
            var orderDate = datePicker.value();
            $.ajax({
                url: '/Order/GetFreeTime',
                type: 'GET',
                data: {date: orderDate.toUTCString(), providerId : "@Model.ServiceProviderId"},
                success: function (data) {
                    var times = JSON.parse(data.freeHours);
                    var timeArray = new Array();
                    var startTime = startTimePicker.value();
                    var isStartTime = false;

                    times.forEach(function(item, i, arr) {
                        timeArray.push(new Date(2000, 0, 1, item, 0, 0));
                        if (startTime.getHours() == item) {
                            isStartTime = true;
                        }
                    });
                    avaliableTimeArray = timeArray;
                    startTimePicker.setOptions({
                        dates: timeArray
                    });
                    if (isStartTime == false) {
                        startTimePicker.value(timeArray[0]);
                        startTime = timeArray[0];
                    }
                    rebuildEndTimePicker(timeArray,startTime);

                },
                error: function (error) {
                    alert('error');
                }
            });
        }

        function rebuildEndTimePicker(timeArray,startTime) {
            var endTimeArray = new Array();
            var endTime = endTimePicker.value();
            var isEndTime = false;
            if (timeArray[0].getHours() == startTime.getHours()) {
                endTimeArray.push(new Date(2000, 0, 1, timeArray[0].getHours() + 1, 0, 0));
            }
            for (var i = 1; i < timeArray.length; i++) {
                if (timeArray[i].getHours() == startTime.getHours()) {
                    endTimeArray.push(new Date(2000, 0, 1, timeArray[i].getHours() + 1, 0, 0));
                }
                if (timeArray[i].getHours() > startTime.getHours()) {
                    if (timeArray[i].getHours() - timeArray[i - 1].getHours() == 1) {
                        endTimeArray.push(new Date(2000, 0, 1, timeArray[i].getHours() + 1, 0, 0));
                    } else {
                        break;
                    }
                }
            }
     
            endTimeArray.forEach(function(item, i, arr) {
                if (endTime.getHours() == item.getHours()) {
                    isEndTime = true;
                }
            });

            endTimePicker.setOptions({
                dates: endTimeArray
            });
            if (isEndTime == false) {
                endTimePicker.value(endTimeArray[0]);
            }
        }

        function sendAjaxLoadServices(category) {
            $.ajax({
                url: '/Order/GetProviderServicesByCategory',
                type: 'GET',
                data: {categoryId: category.Id, providerId : "@Model.ServiceProviderId"},
                success: function (data) {
                    serviceDropDownList.setDataSource([]);
                    var obj = JSON.parse(data.services);
                    obj.forEach(function(item, i, arr) {
                        serviceDropDownList.dataSource.add({Title : item.Title, Id : item.Id});
                    });
                    serviceDropDownList.select(0);
                },
                error: function (error) {
                    alert('error');
                }
            });
        }

        $('input:submit').click(function (event) { 
            event.preventDefault();
            var orderDate = datePicker.value();
            var beginTime = startTimePicker.value();
            var endTime = endTimePicker.value();
            $.ajax({
                url: '/Order/MakeOrder',
                type: 'POST',
                data: {ServiceProviderId:"@Model.ServiceProviderId",
                    Date:orderDate.toUTCString(),
                    BeginTime: beginTime.toLocaleTimeString(),
                    EndTime:endTime.toLocaleTimeString(),
                    RegionId:regionDropDownList.dataItem().Id,
                    ServiceTypeId: serviceDropDownList.dataItem().Id},
                success: function () {
                    alert('success');
                    sendAjaxLoadTime();
                },
                error: function(error) {
                    alert(error.statusText);
                }
            });
        });
    });


</script>

